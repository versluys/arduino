// Setup Maestro serial comm for servos
#include <PololuMaestro.h>
#include <SoftwareSerial.h>
SoftwareSerial maestroSerial(10,11);
MicroMaestro maestro(maestroSerial);

// Define pins for encoder
#define ENC_A 14
#define ENC_B 15
#define ENC_PORT PINC

//set servo variables
int spd = 0;
int accel = 127;
uint16_t lowSet = 4000;
uint16_t highSet = 8000;

void setup() {
  // put your setup code here, to run once:
  maestroSerial.begin(115200);
  
  // Setup encoder pins as inputs */
  pinMode(ENC_A, INPUT);
  digitalWrite(ENC_A, HIGH);
  pinMode(ENC_B, INPUT);
  digitalWrite(ENC_B, HIGH);
  Serial.begin (115200);
  Serial.println("Start");
  //initialize servo position to central wing point
  maestro.setTarget(0,4000);
  maestro.setTarget(1,8000);
  
}

void loop() {
  static uint16_t counter = 1000;      //this variable will be changed by encoder input
 int16_t tmpdata;
 /**/
  tmpdata = read_encoder();
  if( tmpdata ) {
    Serial.print("Counter value: ");
    Serial.println(counter, DEC);
    counter += tmpdata;
  }
  

  
  maestro.setSpeed(0, spd);
  maestro.setAcceleration(0,accel);
  maestro.setSpeed(1, spd);
  maestro.setAcceleration(1,accel);
  //if encoder goes below its limit, set servo to -15deg
  if(counter < 990){
    maestro.setTarget(0,4000);
    maestro.setTarget(1,8000);
  }
  
  //if encoder goes above its limit, set servo to +15 deg
  if(counter > 1500){
    maestro.setTarget(0,8000);
    maestro.setTarget(1,4000);
  }    

}

/* returns change in encoder state (-1,0,1) */
int16_t read_encoder()
{
  static int16_t enc_states[] = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0};
  static uint16_t old_AB = 0;
  /**/
  old_AB <<= 2;                   //remember previous state
  old_AB |= ( ENC_PORT & 0x03 );  //add current state
  return ( enc_states[( old_AB & 0x0f )]);
}
